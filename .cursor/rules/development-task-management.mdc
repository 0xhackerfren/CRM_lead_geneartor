---
description: Breaking down features into tasks, tracking progress, updating devtasks.md, estimating effort, managing backlogs, daily standups
globs: 
alwaysApply: false
---
# Development Task Management Rule

## Overview
Maintain a comprehensive task management system using [devtasks.md](mdc:devtasks.md) to track all development work in granular, trackable units that facilitate easy pickup and stopping of development work.

## Task Management Structure

### 1. Development Phases
- **Phase 1**: MVP Foundation (Basic functionality)
- **Phase 2**: Core Features (AI integration, validation)
- **Phase 3**: Advanced Features (Multi-source, geographic)
- **Phase 4**: Production Ready (Monitoring, optimization)

### 2. Task Granularity Levels
- **Epic**: Major feature or capability (1-2 weeks)
- **Story**: User-facing functionality (2-5 days)
- **Task**: Specific implementation unit (4-8 hours)
- **Subtask**: Atomic work unit (1-2 hours)

### 3. Task Status Tracking
- **Not Started**: üî¥ Ready for development
- **In Progress**: üü° Currently being worked on
- **Blocked**: ‚õî Waiting for dependency/decision
- **Code Review**: üîµ Ready for review
- **Testing**: üü† In validation phase
- **Complete**: ‚úÖ Finished and verified

## DevTasks File Structure

### Phase Organization
```markdown
# CRM Lead Generation - Development Tasks

## Phase 1: MVP Foundation üî¥

### Epic 1.1: Project Setup
**Status**: Not Started | **Priority**: Critical | **Effort**: 2 days

#### Story 1.1.1: Environment Setup
- [ ] Task: Create project directory structure
  - [ ] Subtask: Create main application directories
  - [ ] Subtask: Setup configuration directories
  - [ ] Subtask: Create logging directories
- [ ] Task: Initialize Python environment
  - [ ] Subtask: Create requirements.txt
  - [ ] Subtask: Setup virtual environment
  - [ ] Subtask: Install base dependencies
- [ ] Task: Version control setup
  - [ ] Subtask: Initialize git repository
  - [ ] Subtask: Create .gitignore file
  - [ ] Subtask: Setup initial commit structure
```

### Task Detail Format
```markdown
#### Task: [TASK-001] Implement Basic Web Scraper
**Status**: üî¥ Not Started
**Priority**: High
**Estimated Effort**: 6 hours
**Dependencies**: Environment setup complete
**Assigned To**: [Developer Name]
**Start Date**: TBD
**Due Date**: TBD

**Description**: 
Create a basic web scraper class that can extract business information from Yellow Pages.

**Acceptance Criteria**:
- [ ] Scraper handles rate limiting (1 request per second)
- [ ] Extracts business name, address, phone, website
- [ ] Handles common HTTP errors gracefully
- [ ] Logs all scraping activities
- [ ] Respects robots.txt

**Implementation Notes**:
- Use requests library with session management
- Implement exponential backoff for retries
- Parse HTML with BeautifulSoup
- Store results in structured format

**Testing Requirements**:
- [ ] Unit tests for scraper class
- [ ] Integration test with sample URLs
- [ ] Error handling test cases
- [ ] Performance test (response time)

**Definition of Done**:
- [ ] Code written and reviewed
- [ ] Tests passing (>95% coverage)
- [ ] Documentation updated
- [ ] Manual testing completed
```

## Task Management Workflow

### Daily Workflow
1. **Morning Standup**: Review current tasks and blockers
2. **Task Selection**: Pick next highest priority unblocked task
3. **Development**: Work in focused 2-hour blocks
4. **Progress Update**: Update task status and notes
5. **End of Day**: Commit work and update task status

### Weekly Workflow
1. **Sprint Planning**: Plan next week's tasks
2. **Task Refinement**: Break down large tasks
3. **Priority Review**: Adjust priorities based on progress
4. **Blocker Resolution**: Address dependencies and blockers

### Task State Transitions
```
Not Started ‚Üí In Progress ‚Üí Code Review ‚Üí Testing ‚Üí Complete
     ‚Üì              ‚Üì            ‚Üì          ‚Üì
   Blocked ‚Üê    Blocked ‚Üê    Blocked ‚Üê   Blocked
```

## Granular Task Breakdown Guidelines

### Epic Level (1-2 weeks)
- Major system capabilities
- User-facing features
- Technical infrastructure components

### Story Level (2-5 days)
- Specific user functionality
- API endpoints
- Data processing workflows
- Integration components

### Task Level (4-8 hours)
- Class implementations
- Function development
- Configuration setup
- Testing suites

### Subtask Level (1-2 hours)
- Individual functions
- Unit tests
- Documentation updates
- Bug fixes

## Development Phases Breakdown

### Phase 1: MVP Foundation
- **Epic 1.1**: Project Setup and Environment
- **Epic 1.2**: Basic Web Scraping Infrastructure
- **Epic 1.3**: Simple Data Processing
- **Epic 1.4**: CSV Output Generation
- **Epic 1.5**: Basic Configuration Management

### Phase 2: Core Features
- **Epic 2.1**: AI-Powered Industry Classification
- **Epic 2.2**: Data Validation System
- **Epic 2.3**: Multi-Source Data Integration
- **Epic 2.4**: Local LLM Integration
- **Epic 2.5**: Error Handling and Recovery

### Phase 3: Advanced Features
- **Epic 3.1**: Geographic Processing System
- **Epic 3.2**: Advanced Data Enrichment
- **Epic 3.3**: Quality Assurance Workflows
- **Epic 3.4**: Performance Optimization
- **Epic 3.5**: Multi-State Processing

### Phase 4: Production Ready
- **Epic 4.1**: Comprehensive Monitoring
- **Epic 4.2**: API Integration Layer
- **Epic 4.3**: Deployment Automation
- **Epic 4.4**: Documentation and Training
- **Epic 4.5**: Maintenance and Support Tools

## Best Practices

### Task Writing Guidelines
- Use action-oriented language (Implement, Create, Setup, Test)
- Include specific acceptance criteria
- Estimate effort realistically
- Identify dependencies clearly
- Make tasks testable and measurable

### Progress Tracking
- Update status at least daily
- Document blockers immediately
- Log time spent on tasks
- Note any scope changes
- Maintain completion percentage

### Context Switching
- Document current progress before stopping
- Leave clear notes for resumption
- Update task status accurately
- Commit work in progress to version control
- Create handoff documentation if needed

## Tools and Templates
- **Task Template**: Standardized task format
- **Time Tracking**: Log hours spent per task
- **Dependency Matrix**: Track task interdependencies
- **Progress Dashboard**: Visual status overview
- **Velocity Tracking**: Monitor team productivity


